import telebot
import webbrowser
from telebot import types
import datetime
import threading
import re
from config import TOKEN
from database import create_connection, close_connection, create_table, insert_user_info
from mail import send_emails, send_emails_cancel

bot = telebot.TeleBot(TOKEN)

user_data = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

db_lock = threading.Lock()

@bot.message_handler(commands=['start'])
def main_key(message):
    bot.send_message(message.chat.id, f'{message.from_user.username}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–ª–∏–Ω–∏–∫—É "–ú–µ–¥—Å–µ—Ä–∏–≤—Å"!',reply_markup=main())
def main():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º')
    markup.row(btn1)
    btn2 = types.KeyboardButton("–ú–æ–∏ –∑–∞–ø–∏—Å–∏")
    btn6 = types.KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–∞—á–∞—Ö")
    markup.row(btn2, btn6)
    btn3 = types.KeyboardButton("–ê–¥—Ä–µ—Å–∞ –∫–ª–∏–Ω–∏–∫")
    btn4 = types.KeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    btn5 = types.KeyboardButton("–ü–æ—Å–µ—Ç–∏—Ç—å –≤–µ–±-—Å–∞–π—Ç")
    markup.row(btn3, btn4, btn5)
    return markup

@bot.message_handler(func=lambda message: True)
def on_click(message):
    if message.text == "–ü–æ—Å–µ—Ç–∏—Ç—å –≤–µ–±-—Å–∞–π—Ç":
        webbrowser.open('http://medservis72.ru')
        bot.send_message(message.chat.id, "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞.‚úÖ\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç:\n\nhttp://medservis72.ru",
                         parse_mode='html')
    elif message.text == "–ê–¥—Ä–µ—Å–∞ –∫–ª–∏–Ω–∏–∫":
        markup2 = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('–≥.–¢—é–º–µ–Ω—å', callback_data='tumen_adress')
        btn2 = types.InlineKeyboardButton('–≥.–ö–æ–≥–∞–ª—ã–º', callback_data='kogalym_adress')
        btn3 = types.InlineKeyboardButton('–≥.–£—Ä–∞–π', callback_data='uray_adress')
        markup2.row(btn1, btn2, btn3)
        bot.reply_to(message, '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å:', reply_markup=markup2)
    elif message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–∞—á–∞—Ö":
        bot.send_photo(message.chat.id, open('photo.jpg', 'rb'))
    elif message.text == "–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ":
        markup3 = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('–≥.–¢—é–º–µ–Ω—å', callback_data='text1')
        btn2 = types.InlineKeyboardButton('–≥.–ö–æ–≥–∞–ª—ã–º', callback_data='text2')
        btn3 = types.InlineKeyboardButton('–≥.–£—Ä–∞–π', callback_data='text3')
        markup3.row(btn1, btn2, btn3)
        bot.reply_to(message, '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:', reply_markup=markup3)
    elif message.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º":
        bot.send_message(message.chat.id, "–î–ª—è –∑–∞–ø–∏—Å–∏ –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –§–ò–û:", reply_markup=create_cancel_button())
        bot.register_next_step_handler(message, process_name_step)
    elif message.text == "–ú–æ–∏ –∑–∞–ø–∏—Å–∏":
            markup = types.InlineKeyboardMarkup()
            btn1 = types.InlineKeyboardButton('–≥.–¢—é–º–µ–Ω—å', callback_data='tumen')
            btn2 = types.InlineKeyboardButton('–≥.–ö–æ–≥–∞–ª—ã–º', callback_data='kogalym')
            btn3 = types.InlineKeyboardButton('–≥.–£—Ä–∞–π', callback_data='uray')
            markup.row(btn1, btn2, btn3)
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∑–Ω–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –ø—Ä–∏—ë–º—ã:', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ['tumen_adress', 'kogalym_adress', 'uray_adress'])
def handle_callback_query(call):
    if call.data == 'tumen_adress':
        tumen = f"–ê–¥—Ä–µ—Å –≤ –≥.–¢—é–º–µ–Ω—å:\n\n" \
                f"üìç—É–ª.–ö—Ä–µ–º–ª–µ–≤—Å–∫–∞—è, –¥.112, –∫–æ—Ä–ø. 4\n"
        bot.send_message(call.message.chat.id, tumen)
        bot.send_location(call.message.chat.id, latitude=57.133480,longitude=65.472254)
    elif call.data == 'kogalym_adress':
        kogalum = f"–ê–¥—Ä–µ—Å –≤ –≥.–ö–æ–≥–∞–ª—ã–º:\n\n" \
                f"üìç—É–ª.–ù–µ—Ñ—Ç—è–Ω–∏–∫–æ–≤ –¥.5\n"
        bot.send_message(call.message.chat.id, kogalum)
        bot.send_location(call.message.chat.id, latitude=62.244657,longitude=74.53215)
    elif call.data == 'uray_adress':
        uray = f"–ê–¥—Ä–µ—Å –≤ –≥.–£—Ä–∞–π:\n\n" \
            f"üìç–º-–æ–Ω 1-–ê, –¥–æ–º 74\n"
        bot.send_message(call.message.chat.id, uray)
        bot.send_location(call.message.chat.id, latitude=60.123685, longitude=64.781072)

def check_callback_for_records(call):
        return call.data.startswith(('tumen', 'kogalym', 'uray', 'otmena', 'yes', 'no'))

@bot.callback_query_handler(func=check_callback_for_records)
def callback_inline(call):
    if call.message:
        if call.data in ['tumen', 'kogalym', 'uray']:
            data = get_user_info(call.data, call.message.chat.id)
            if data:
                current_date = datetime.datetime.now().date()  # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
                upcoming_records = []  # –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
                bot.send_message(call.message.chat.id, '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º –∫ –Ω–∞–º:')

                for row in data:
                    row_id, user_id, name, phone, email, date, time = row
                    record_date = datetime.datetime.strptime(date, "%Y-%m-%d").date()

                    if record_date >= current_date:
                        upcoming_records.append(row)

                if upcoming_records:
                    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–ø–∏—Å–µ–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –¥–∞—Ç—ã
                    upcoming_records.sort(key=lambda r: datetime.datetime.strptime(r[5], "%Y-%m-%d"))

                    for row in upcoming_records:
                        row_id, user_id, name, phone, email, date, time = row
                        formatted_date = datetime.datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")
                        formatted_time = time[:5]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
                        message = f'üë§–ò–º—è: {name}\n\nüóìÔ∏è–î–∞—Ç–∞ –ø—Ä–∏—ë–º–∞: {formatted_date}\n\n‚åö–í—Ä–µ–º—è –ø—Ä–∏—ë–º–∞: {formatted_time}'

                        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
                        markup = types.InlineKeyboardMarkup()
                        cancel_button = types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",callback_data=f'otmena_{call.data}_{row_id}')
                        markup.add(cancel_button)

                        bot.send_message(call.message.chat.id, message, reply_markup=markup)

                else:
                    bot.send_message(call.message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ.')
            else:
                bot.send_message(call.message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ.')

        elif call.data.startswith('otmena'):
            _, city, row_id = call.data.split('_')

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            markup = types.InlineKeyboardMarkup()
            yes_button = types.InlineKeyboardButton(text="–î–∞", callback_data=f'yes_{city}_{row_id}')
            no_button = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f'no_{city}_{row_id}')
            markup.row(yes_button, no_button)

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å?', reply_markup=markup)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–∞"
        elif call.data.startswith('yes_'):
            _, city, row_id = call.data.split('_')
            user_data = get_user_info(city, call.message.chat.id)
            if user_data:
                name = user_data[0][2]
                phone = user_data[0][3]
                time = user_data[0][6]
                date = user_data[0][5]

            send_emails_cancel(name, phone, city, date, time)
            delete_user_info(city, int(row_id))
            bot.send_message(call.message.chat.id, '–í–∞—à–∞ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n–ú—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–µ –≤—Ä–µ–º—è –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –≤ –Ω–∞–ª–∏—á–∏–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç.\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–ú–µ–¥—Å–µ—Ä–≤–∏—Å ')



            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–¥–∞–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å—å—é
            bot.delete_message(call.message.chat.id, call.message.message_id)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–µ—Ç"
        elif call.data.startswith('no_'):
            _, city, row_id = call.data.split('_')

            data = get_user_info(city, call.message.chat.id)
            if data:
                for row in data:
                    if row[0] == int(row_id):  # –∏—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º row_id
                        row_id, user_id, name, phone, email, date, time = row
                        formatted_date = datetime.datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")
                        formatted_time = time[:5]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
                        message = f'üë§–ò–º—è: {name}\n\nüóìÔ∏è–î–∞—Ç–∞ –ø—Ä–∏—ë–º–∞: {formatted_date}\n\n‚åö–í—Ä–µ–º—è –ø—Ä–∏—ë–º–∞: {formatted_time}'

                        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
                        markup = types.InlineKeyboardMarkup()
                        cancel_button = types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",callback_data=f'otmena_{city}_{row_id}')
                        markup.add(cancel_button)

                        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                              text=f'–í–∞—à–∞ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ñ–¥–µ–º –í–∞—Å –Ω–∞ –ø—Ä–∏—ë–º!\n\n{message}',
                                              reply_markup=markup)
                        break


def get_user_info(city, user_id):
    conn, cursor = create_connection()
    cursor.execute(f"SELECT id, user_id, name, phone, email, date, time FROM users_info_{city} WHERE user_id = ?", (user_id,))
    data = cursor.fetchall()
    close_connection(conn)
    return data

def delete_user_info(city, id):
    conn, cursor = create_connection()
    cursor.execute(f"DELETE FROM users_info_{city} WHERE id = ?", (id,))
    conn.commit()
    close_connection(conn)

def create_cancel_button():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn_cancel = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
    markup.add(btn_cancel)
    return markup

def process_name_step(message):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        cancel_registration(message)
        return
    name = message.text
    name_pattern = r'^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s]+$'
    if re.match(name_pattern, name):
        user_data[message.from_user.id] = {'name': name}
        bot.send_message(message.chat.id, "–î–ª—è –∑–∞–ø–∏—Å–∏ –≤–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=create_cancel_button())
        bot.register_next_step_handler(message, get_phone)
    else:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∏–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, process_name_step)

def cancel_registration(message):
    user_id = message.from_user.id
    if user_id in user_data:
        del user_data[user_id]
        bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=main())
    else:
        bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=main())

def get_phone(message):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        cancel_registration(message)
        return

    phone = message.text
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    phone_pattern = r'^\+?[1-9]\d{1,14}$'  # –ü—Ä–∏–º–µ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if re.match(phone_pattern, phone):
        user_data[message.from_user.id]['phone'] = phone
        bot.send_message(message.chat.id, "–î–ª—è –∑–∞–ø–∏—Å–∏ –≤–≤–µ–¥–∏—Ç–µ –í–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:", reply_markup=create_cancel_button())
        bot.register_next_step_handler(message, get_email)
    else:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
        bot.register_next_step_handler(message, get_phone)

def get_email(message):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        cancel_registration(message)
        return
    email = message.text
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'  # –ü—Ä–∏–º–µ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞ –ø–æ—á—Ç—ã
    if re.match(email_pattern, email):
        user_data[message.from_user.id]['email'] = email
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:", reply_markup=create_city_markup())
    else:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å.")
        bot.register_next_step_handler(message, get_email)

def create_city_markup():
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–≥.–¢—é–º–µ–Ω—å', callback_data='city_tumen')
    btn2 = types.InlineKeyboardButton('–≥.–ö–æ–≥–∞–ª—ã–º', callback_data='city_kogalym')
    btn3 = types.InlineKeyboardButton('–≥.–£—Ä–∞–π', callback_data='city_uray')
    btn4 = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel_city')
    markup.row(btn1, btn2, btn3)
    markup.row(btn4)
    return markup

@bot.callback_query_handler(func=lambda call: call.data == 'cancel_city')
def handle_cancel_appointment(call):
    user_id = call.from_user.id
    del user_data[user_id]['name']
    del user_data[user_id]['phone']
    del user_data[user_id]['email']
    bot.send_message(call.message.chat.id, "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=main())
    bot.delete_message(call.message.chat.id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('city_'))
def handle_city_callback(call):
    city = call.data.split('_')[1]
    user_id = call.from_user.id
    user_data[user_id]['city'] = city
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏:", reply_markup=create_type_markup())
    bot.delete_message(call.message.chat.id, call.message.message_id)

def create_type_markup():
    markup = types.InlineKeyboardMarkup()
    inspection_button = types.InlineKeyboardButton('–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è/–æ—Å–º–æ—Ç—Ä', callback_data='type_inspection')
    treatment_button = types.InlineKeyboardButton('–õ–µ—á–µ–Ω–∏–µ', callback_data='type_treatment')
    cancel_button = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel_type')
    markup.row(inspection_button)
    markup.row(treatment_button)
    markup.row(cancel_button)
    return markup

@bot.callback_query_handler(func=lambda call: call.data == 'cancel_type')
def handle_cancel_appointment(call):
    user_id = call.from_user.id
    del user_data[user_id]['name']
    del user_data[user_id]['phone']
    del user_data[user_id]['email']
    del user_data[user_id]['city']
    bot.send_message(call.message.chat.id, "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=main())
    bot.delete_message(call.message.chat.id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('type_'))
def handle_type_callback(call):
    type = call.data.split('_')[1]
    user_id = call.from_user.id
    user_data[user_id]['type'] = type
    date_message = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–∏—ë–º–∞:"
    bot.send_message(call.message.chat.id, date_message, reply_markup=create_date())
    bot.delete_message(call.message.chat.id, call.message.message_id)

def create_date():
    markup = types.InlineKeyboardMarkup()
    today = datetime.date.today()
    for i in range(7): # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
        date = today + datetime.timedelta(days=i)
        callback_data = f"date_{date}"
        btn = types.InlineKeyboardButton(date.strftime("%d.%m.%Y"), callback_data=callback_data)
        markup.add(btn)
    cancel_button = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_date")
    markup.add(cancel_button)
    return markup

@bot.callback_query_handler(func=lambda call: call.data == 'cancel_date')
def handle_cancel_appointment(call):
    user_id = call.from_user.id
    del user_data[user_id]['name']
    del user_data[user_id]['phone']
    del user_data[user_id]['email']
    del user_data[user_id]['city']
    del user_data[user_id]['type']
    bot.send_message(call.message.chat.id, "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=main())    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
    bot.delete_message(call.message.chat.id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('date_'))
def handle_date_callback(call):
    date = call.data.split('_')[1]
    user_id = call.from_user.id
    user_data[user_id]['date'] = date
    formatted_date = datetime.datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")
    current_time = datetime.datetime.now().time()  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    message = f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏—ë–º–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ {formatted_date}:"
    bot.send_message(call.message.chat.id, message, reply_markup=create_time_markup(user_id, current_time))
    bot.delete_message(call.message.chat.id, call.message.message_id)

def create_time_markup(user_id, current_time):
    markup = types.InlineKeyboardMarkup()
    date = user_data[user_id]['date']
    city = user_data[user_id]['city']
    type = user_data[user_id]['type']

    time_range = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π 'time_range'

    if type == 'inspection':  # –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è/–æ—Å–º–æ—Ç—Ä
        if city == 'kogalym':
            time_range = range(8, 10)
        elif city in ['tyumen', 'uray']:
            time_range = range(9, 11)
        minute_steps = [0, 15, 30, 45]
        col_num = 3
    else:  # –õ–µ—á–µ–Ω–∏–µ
        if city in ['tyumen', 'kogalym']:
            time_range = range(11, 21)
        elif city == 'uray':
            time_range = range(10, 20)
        minute_steps = [0, 30]
        col_num = 2

    button_cols = [[] for _ in range(col_num)]
    for hour in time_range:
        for i, minutes in enumerate(minute_steps):
            time_i = datetime.time(hour, minutes)
            if datetime.date.today() == datetime.datetime.strptime(date, "%Y-%m-%d").date() and current_time >= time_i:
                continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ –æ–Ω–æ —Ä–∞–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            callback_data_i = f"time_{time_i}"
            if check_availability(city, date, str(time_i)):  # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
                button_i = types.InlineKeyboardButton(time_i.strftime("%H:%M"), callback_data=callback_data_i)
                button_cols[i % col_num].append(button_i)

    for button_rows in zip(*button_cols):
        markup.row(*button_rows)

    back_button = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_date_selection")
    cancel_button = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_time")
    markup.add(back_button)
    markup.add(cancel_button)
    return markup

@bot.callback_query_handler(func=lambda call: call.data == 'cancel_time')
def handle_cancel_appointment(call):
    user_id = call.from_user.id
    # –£–¥–∞–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–ø–∏—Å—å—é
    del user_data[user_id]['name']
    del user_data[user_id]['phone']
    del user_data[user_id]['email']
    del user_data[user_id]['city']
    del user_data[user_id]['date']
    bot.send_message(call.message.chat.id, "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=main())    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
    bot.delete_message(call.message.chat.id, call.message.message_id)

def check_availability(city, date, time):
    conn, cursor = create_connection()
    cursor.execute(f"SELECT * FROM users_info_{city} WHERE date = ? AND time = ?", (date, time))
    rows = cursor.fetchall()
    close_connection(conn)
    return len(rows) == 0  # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º, –≤–µ—Ä–Ω—É—Ç—å True

@bot.callback_query_handler(func=lambda call: call.data.startswith('time_'))
def handle_time_callback(call):
    if call.data == 'back_to_date_selection':
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–∏—ë–º–∞:", reply_markup=create_date())
        bot.delete_message(call.message.chat.id, call.message.message_id)
    else:
        time = call.data.split('_')[1]
        user_id = call.from_user.id
        user_data[user_id]['time'] = time
        date = user_data[user_id]['date']

    name = user_data[user_id]['name']
    phone = user_data[user_id]['phone']
    email = user_data[user_id]['email']
    date = user_data[user_id]['date']
    city = user_data[user_id]['city']

    with db_lock:
        try:
            if check_availability(city, date, time):
                insert_user_info(city, user_id, name, phone, email, date, time)
                datetime_obj = datetime.datetime.strptime(date, "%Y-%m-%d")
                date = user_data[user_id]['date']
                formatted_date = datetime.datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")
                formatted_time = time[:5]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
                datetime_str = f"{formatted_date} –≤ {formatted_time}"

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                confirmation_message = f"–í–∞—à–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –ø—Ä–∏–Ω—è—Ç—ã!\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏:\n\n" \
                                       f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime_str}\n" \
                                       f"–ò–º—è: {name}\n" \
                                       f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n" \
                                       f"Email: {email}\n\n" \
                                       f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –≤–µ—Ä–Ω–æ?"
                markup = types.InlineKeyboardMarkup()
                yes_button = types.InlineKeyboardButton('–î–∞', callback_data='confirm')
                no_button = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='cancel')
                markup.row(yes_button, no_button)

                bot.send_message(call.message.chat.id, confirmation_message, reply_markup=markup)
                bot.delete_message(call.message.chat.id, call.message.message_id)
            else:
                bot.send_message(call.message.chat.id, "–î–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è/–¥–∞—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –¥–∞—Ç—É.")
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
            bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
            bot.delete_message(call.message.chat.id, call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data == 'back_to_date_selection')
def handle_back_to_date_selection(call):
    user_id = call.from_user.id
    del user_data[user_id]['date']  # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–∏—ë–º–∞:", reply_markup=create_date())
    bot.delete_message(call.message.chat.id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data == 'confirm')
def handle_confirmation(call):
    user_id = call.from_user.id

    name = user_data[user_id]['name']
    phone = user_data[user_id]['phone']
    email = user_data[user_id]['email']
    city = user_data[user_id]['city']
    type = user_data[user_id]['type']
    date = user_data[user_id]['date']
    time = user_data[user_id]['time']

    address = ""
    if city == 'tumen':
        address = "—É–ª.–ö—Ä–µ–º–ª–µ–≤—Å–∫–∞—è, –¥.112, –∫–æ—Ä–ø. 4"
        recipient = 'alenastud23@mail.ru'
    elif city == 'kogalym':
        address = "—É–ª. –ù–µ—Ñ—Ç—è–Ω–∏–∫–æ–≤ –¥.5"
        recipient = 'alenastud23@mail.ru'
    elif city == 'uray':
        address = "–º-–æ–Ω 1-–ê, –¥–æ–º 74"
        recipient = 'alenastud23@mail.ru'
    formatted_date = datetime.datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")
    formatted_time = time[:5]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
    datetime_str = f"{formatted_date} –≤ {formatted_time}"
    if type == 'inspection':
        type1 = "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è/–æ—Å–º–æ—Ç—Ä"
        type_emoji = 'üîç'
    else:
        type1 = "–ª–µ—á–µ–Ω–∏–µ"
        type_emoji = 'ü¶∑'
    confirmation_message = f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n" \
                           f"{type_emoji}–¢–∏–ø –∑–∞–ø–∏—Å–∏: {type1}\n" \
                           f"üìÖ–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime_str}\n" \
                           f"üìç–ê–¥—Ä–µ—Å: {address}\n\n" \
                            f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π –ø–æ–ª–∏—Å –∏ –ø–∞—Å–ø–æ—Ä—Ç."

    bot.send_message(call.message.chat.id, confirmation_message, reply_markup=main())
    bot.delete_message(call.message.chat.id, call.message.message_id)
    send_emails(name, phone, email, city, type, date, time)

@bot.callback_query_handler(func=lambda call: call.data == 'cancel')
def handle_cancel(call):
    user_id = call.from_user.id
    if user_id in user_data:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        date = user_data[user_id]['date']
        time = user_data[user_id]['time']
        city = user_data[user_id]['city']

        # –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn, cursor = create_connection()
        cursor.execute(f"DELETE FROM users_info_{city} WHERE user_id = ? AND date = ? AND time = ?", (user_id, date, time))
        bot.send_message(call.message.chat.id, "–í–∞—à–∞ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.", reply_markup=main())
        conn.commit()
        close_connection(conn)
    else:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    bot.delete_message(call.message.chat.id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == 'text1':
        confirmation_message = f"‚òéÔ∏è–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:\n\n" \
                           f"8(3452) 39-02-62\n" \
                           f"8(3452)44-09-47\n\n" \
                           f"‚úâÔ∏è–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:\n\n" \
                            f"medservistmn@yandex.ru"

        bot.send_message(call.message.chat.id, confirmation_message, reply_markup=main())
    elif call.data == 'text2':
        confirmation_message = f"‚òéÔ∏è–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:\n\n" \
                               f"8 (34667) 55-300\n" \
                               f"8(34667) 55-196\n\n" \
                               f"‚úâÔ∏è–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:\n\n" \
                               f"medservistmn@yandex.ru"
        bot.send_message(call.message.chat.id, confirmation_message, reply_markup=main())
    elif call.data == 'text3':
        confirmation_message = f"‚òéÔ∏è–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:\n\n" \
                               f"8 (34676)3-16-12\n\n" \
                               f"‚úâÔ∏è–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:\n\n" \
                               f"medservistmn@yandex.ru"
        bot.send_message(call.message.chat.id, confirmation_message, reply_markup=main())

bot.polling(none_stop=True)
